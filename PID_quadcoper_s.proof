\settings {
"#Proof-Settings-Config-File
#Fri Apr 02 16:59:47 NOVT 2021
[General]UseJML=true
[DecisionProcedure]savefile=false
[SimultaneousUpdateSimplifier]DeleteEffectLessLocations=true
[ReduceOptions]rlqepnf=DEFAULT
[DLOptions]simplifier=Orbital
[ReduceOptions]rlall=false
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_INVARIANT
[DecisionProcedure]ActiveRule=_noname_
[General]DnDDirectionSensitive=true
[DLOptions]reduceOnFreshBranch=true
[ReduceOptions]rlqeheu=DEFAULT
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_NONE
[DLOptions]CexFinder=ITER_DEEP
[Strategy]MaximumNumberOfAutomaticApplications=10000
[ReduceOptions]quantifierEliminationMethod=RLQE
[DLOptions]solveODE=true
[StrategyProperty]QUERY_OPTIONS_KEY=QUERY_NONE
[General]ProofAssistant=false
[General]StupidMode=true
[ReduceOptions]rlcadextonly=DEFAULT
[hints]used=,Challenge.1,Challenge.2,8.1,8.2,8.3,8.4,7.5
[DLOptions]simplifyTimeout=0
[ReduceOptions]rlcadpbfvs=DEFAULT
[ReduceOptions]rlqedfs=DEFAULT
[DLOptions]csdpForceInternal=false
[DLOptions]applyLocalSimplify=false
[DLOptions]quantifierEliminator=Reduce
[ReduceOptions]rlcadisoallroots=DEFAULT
[ReduceOptions]rlcadprojonly=DEFAULT
[DecisionProcedure]Exec=
[DLOptions]readdQuantifiers=true
[TacletTranslation]assignment=11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
[DLOptions]constantTimeoutIncreaseFactor=0
[MathematicaOptions]useEliminateList=true
[ReduceOptions]qepcadFallback=false
[MathematicaOptions]quantifierEliminationMethod=REDUCE
[QepcadOptions]qepcadMemoryLimit=2000000
[DLOptions]TracerStat=ON
[Strategy]ActiveStrategy=DLStrategy
[ReduceOptions]rlcadhongproj=DEFAULT
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[Choice]DefaultChoices=initialisation-initialisation\\:disableStaticInitialisation , nullPointerPolicy-nullPointerPolicy\\:nullCheck , throughout-throughout\\:toutOn , javacard-javacard\\:jcOff , transactionAbort-transactionAbort\\:abortOn , transactions-transactions\\:transactionsOn , intRules-intRules\\:arithmeticSemanticsIgnoringOF , programRules-programRules\\:Java
[DLOptions]odeSolver=Orbital
[OrbitalOptions]representation=big
[SimultaneousUpdateSimplifier]EagerSimplification=true
[DLOptions]initialTimeout=100000
[DecisionProcedure]multprovers=Z3\\=true\\:Yices\\=true\\:Simplify\\=true\\:CVC3\\=true
[DLOptions]useSOS=false
[ReduceOptions]eliminateFractions=false
[DLOptions]counterExampleGenerator=SMT
[DLOptions]sosChecker=Built-in SOS
[DLOptions]applyGammaRules=ONLY_TO_MODALITIES
[DLOptions]applyToModality=false
[MathematicaOptions]memoryConstraint=-1
[ReduceOptions]rlcadaprojalways=DEFAULT
[ReduceOptions]rlcadpartial=DEFAULT
[DLOptions]QEOnlyToTrue=false
[Z3Options]z3ElimExPrefix=true
[ReduceOptions]rlcadtrimtree=DEFAULT
[ReduceOptions]rlqesqsc=DEFAULT
[ReduceOptions]groebnerBasis=false
[General]SoundNotification=false
[ReduceOptions]rlanuexpsremseq=DEFAULT
[DLOptions]ignoreAnnotations=false
[ReduceOptions]rlcadfulldimonly=DEFAULT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[DLOptions]usePowersetIterativeReduce=true
[TacletTranslation]saveToFile=false
[MathematicaOptions]useParallelize=true
[DLOptions]groebnerBasisCalculator=Orbital
[TacletTranslation]filename=
[DLOptions]percentOfPowersetForIterativeReduce=70
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[ReduceOptions]rlposden=DEFAULT
[CohenhormanderOptions]eliminatorMode=DNF
[DLOptions]universalClosureOnQE=true
[OrbitalOptions]precision=34
[ReduceOptions]rlnzden=ON
[DLOptions]linearTimeoutIncreaseFactor=2
[General]UseOCL=false
[ReduceOptions]rlsimpl=ON
[ReduceOptions]rlcadaproj=DEFAULT
[DLOptions]termFactoryClass=de.uka.ilkd.key.dl.model.impl.TermFactoryImpl
[TacletTranslation]maxGeneric=2
[MetiTarskiOptions]metitBacktracking=true
[DLOptions]simplifyAfterReduce=false
[DecisionProcedure]WaitForAllProvers=false
[DLOptions]addRigidFormulas=true
[DLOptions]BuiltInArithmetic=APPLY_EQUALITIES
[DLOptions]applyLocalReduce=OFF
[DLOptions]invariantRule=FRESH
[DLOptions]FOStrategy=LAZY
[DLOptions]applyGlobalReduce=true
[ReduceOptions]rlanuexsgnopt=DEFAULT
[ReduceOptions]rlcadbaseonly=DEFAULT
[DLOptions]quadricTimeoutIncreaseFactor=0
[DLOptions]simplifyAfterODESolve=false
[ReduceOptions]rlcadrawformula=DEFAULT
[DecisionProcedure]WeakenSMTTranslation=false
[DecisionProcedure]Timeout=600
[DLOptions]DiffSat=AUTO
[HOLLightOptions]useSnapshots=false
[DecisionProcedure]showSMTResDialog=false
[OrbitalOptions]sparsePolynomials=true
[DLOptions]useODEIndFinMethods=false
[Choice]Choices=initialisation-initialisation\\\:disableStaticInitialisation-initialisation\\\:enableStaticInitialisation , throughout-throughout\\\:toutOff-throughout\\\:toutOn , nullPointerPolicy-nullPointerPolicy\\\:nullCheck-nullPointerPolicy\\\:noNullCheck , javacard-javacard\\\:jcOff-javacard\\\:jcOn , transactionAbort-transactionAbort\\\:abortOn-transactionAbort\\\:abortOff , transactions-transactions\\\:transactionsOff-transactions\\\:transactionsOn , intRules-intRules\\\:javaSemantics-intRules\\\:arithmeticSemanticsIgnoringOF-intRules\\\:arithmeticSemanticsCheckingOF , programRules-programRules\\\:ODL-programRules\\\:Java-programRules\\\\:dL
[ReduceOptions]rlqeqsc=DEFAULT
[DLOptions]diffSatTimeout=10000
[Strategy]Timeout=-1
[ReduceOptions]rlcadfac=DEFAULT
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_EXPAND
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[DLOptions]counterexampleTest=ON
[MathematicaOptions]eliminateFractions=false
[ReduceOptions]rlcadte=DEFAULT
[DLOptions]BuiltInArithmeticIneqs=OFF
[StrategyProperty]GOALCHOOSER_OPTIONS_KEY=GOALCHOOSER_DEFAULT
[DLOptions]loopSatTimeout=4000000
[Z3Options]z3Prenex=true
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[HOLLightOptions]qeMethod=ProofProducing
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[DLOptions]simplifyBeforeReduce=false
[DLOptions]useIterativeReduceRule=false
[DLOptions]ibcOnlyToFO=true
[ReduceOptions]rlanuexgcdnormalize=DEFAULT
"
}

 \problem {
   (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (\[
                                                                                                                                                            R x, y, z, xr, yr, zr, Theta, Phi, Psi, Thetar, Phir, Psir, Gammax, Gammay, Gammaz, GammaTheta, GammaPhi, GammaPsi, Kpx, Kpy, Kpz, Kix, Kiy, Kiz, Kdx, Kdy, Kdz, KpTheta, KpPhi, KpPsi, KiTheta, KiPhi, KiPsi, KdTheta, KdPhi, KdPsi, Ixx, Ixy, Ixz, Iyx, Iyy, Iyz, Izx, Izy, Izz, m, g, eps, LminKd, LminMt, LmaxMt, LmaxKi, LminKp, U, vx, vy, vz, vTheta, vPhi, vPsi, ix, iy, iz, iTheta, iPhi, iPsi, c
                                                                                                                                                            \] (  (g)
                                                                                                                                                                = (9.8)))
                                                                                                                                                       & (  (m)
                                                                                                                                                          = (              = (2.03)))
                                                                                                                                                    & (  (U)
                                                                                                                                                       = (0)))
                                                                                                                                                 & (  (Ixx)
                                                                                                                                                    = (0.002547)))
                                                                                                                                              & (  (Iyy)
                                                                                                                                                 = (0.003613)))
                                                                                                                                           & (  (Izz)
                                                                                                                                              = (0.001074)))
                                                                                                                                        & (  (Ixy)
                                                                                                                                           = (0.00308)))
                                                                                                                                     & (  (Ixz)
                                                                                                                                        = (0.0018105)))
                                                                                                                                  & (  (Iyx)
                                                                                                                                     = (0.00308)))
                                                                                                                               & (  (Izy)
                                                                                                                                  = (0.0023435)))
                                                                                                                            & (  (Izx)
                                                                                                                               = (0.0018105)))
                                                                                                                         & (  (Iyz)
                                                                                                                            = (0.0023435)))
                                                                                                                      & (  (xr)
                                                                                                                         = (1)))
                                                                                                                   & (  (yr)
                                                                                                                      = (-(1))))
                                                                                                                & (  (zr)
                                                                                                                   = (2)))
                                                                                                             & (  (Psir)
                                                                                                                = (0.523599)))
                                                                                                          & (  (Thetar)
                                                                                                             = (0)))
                                                                                                       & (  (Phir)
                                                                                                          = (0)))
                                                                                                    & (  (Kpx)
                                                                                                       = (1)))
                                                                                                 & (  (Kpy)
                                                                                                    = (1)))
                                                                                              & (  (Kpz)
                                                                                                 = (1)))
                                                                                           & (  (Kix)
                                                                                              = (1)))
                                                                                        & (  (Kiy)
                                                                                           = (1)))
                                                                                     & (  (Kiz)
                                                                                        = (1)))
                                                                                  & (  (Kdx)
                                                                                     = (1)))
                                                                               & (  (Kdy)
                                                                                  = (1)))
                                                                            & (  (Kdz)
                                                                               = (1)))
                                                                         & (  (KpTheta)
                                                                            = (1)))
                                                                      & (  (KpPhi)
                                                                         = (1)))
                                                                   & (  (KpPsi)
                                                                      = (1)))
                                                                & (  (KiTheta)
                                                                   = (1)))
                                                             & (  (KiPhi)
                                                                = (1)))
                                                          & (  (KiPsi)
                                                             = (1)))
                                                       & (  (KdTheta)
                                                          = (1)))
                                                    & (  (KdPhi)
                                                       = (1)))
                                                 & (  (KdPsi)
                                                    = (1)))
                                              & (  (LminKd)
                                                 = (1)))
                                           & (  (LmaxKi)
                                              = (1)))
                                        & (  (LminKp)
                                           = (1)))
                                     & (  (LmaxMt)
                                        = (2.03)))
                                  & (  (LminMt)
                                     = (  (9.90422)
                                        * (  (10)
                                           ^ (-(20))))))
                               & (   (eps)
                                  <  (  (  (LminKd)
                                         * (LminMt))
                                      / ((LmaxMt) ^ (2)))))
                            & (   (eps)
                               >  ((LmaxKi) / (LminMt))))
                         & (  (Gammax)
                            = (  ((eps) * (ix))
                               + ((x) - (xr)))))
                      & (  (Gammay)
                         = (  ((eps) * (iy))
                            + ((y) - (yr)))))
                   & (  (Gammaz)
                      = (((eps) * (iz)) + ((z) - (zr)))))
                & (  (GammaTheta)
                   = (  ((eps) * (iTheta))
                      + ((Theta) - (Thetar)))))
             & (  (GammaPhi)
                = (((eps) * (iPhi)) + ((Phi) - (Phir)))))
          & (  (GammaPsi)
             = (((eps) * (iPsi)) + ((Psi) - (Psir)))))
       & ((c) >  (0)))
    & (   (  (  ((U) + (((m) * (g)) * ((z) - (zr))))
              + (  (0.5)
                 * (  (  (  (  (  (  (-((Kix) / (eps)))
                                   + (Kpx))
                                * (((x) - (xr)) ^ (2)))
                             + (  (  (-((Kiy) / (eps)))
                                   + (Kpy))
                                * (((y) - (yr)) ^ (2))))
                          + (  (  (-((Kiz) / (eps)))
                                + (Kpz))
                             * (((z) - (zr)) ^ (2))))
                       + (  (  (2)
                             * (  (-((KiTheta) / (eps)))
                                + (KpTheta)))
                          * (((Theta) - (Thetar)) ^ (2))))
                    + (  (  (-((KiPhi) / (eps)))
                          + (KpPhi))
                       * (((Phi) - (Phir)) ^ (2))))))
           + (  (0.5)
              * (  (  (  (  (  (  (  (  (  (  (  (  (  (Kix)
                                                     * (  (Gammax)
                                                        ^ (2)))
                                                  / (eps))
                                               + (  (  (Kiy)
                                                     * (  (Gammay)
                                                        ^ (2)))
                                                  / (eps)))
                                            + (  (  (Kiz)
                                                  * (  (Gammaz)
                                                     ^ (2)))
                                               / (eps)))
                                         + (  (  (KiTheta)
                                               * (  (GammaTheta)
                                                  ^ (2)))
                                            / (eps)))
                                      + (  (  (KiPhi)
                                            * (  (GammaPhi)
                                               ^ (2)))
                                         / (eps)))
                                   + (  (  (KiTheta)
                                         * (  (GammaPsi)
                                            ^ (2)))
                                      / (eps)))
                                + (  ((x) - (xr))
                                   * (  ((eps) * (Kdx))
                                      * ((x) - (xr)))))
                             + (  ((y) - (yr))
                                * (  ((eps) * (Kdy))
                                   * ((y) - (yr)))))
                          + (  ((z) - (zr))
                             * (  ((eps) * (Kdz))
                                * ((z) - (zr)))))
                       + (  ((Theta) - (Thetar))
                          * (  ((eps) * (KdTheta))
                             * ((Theta) - (Thetar)))))
                    + (  ((Phi) - (Phir))
                       * (  ((eps) * (KdPhi))
                          * ((Phi) - (Phir)))))
                 + (  ((Theta) - (Thetar))
                    * (  ((eps) * (KdTheta))
                       * ((Theta) - (Thetar)))))))
       <  (c)))
-> (  (  (  (  (  (  (\[
                        {(x') = (vx), (vx') = (((((Kpx) * ((x) - (xr))) - ((Kdx) * (vx))) + ((Kix) * (ix))) / (m)), 
                          (ix') = ((x) - (xr)), 
                          (y') = (vy), (vy') = (((((Kpy) * ((y) - (yr))) - ((Kdy) * (vy))) + ((Kiy) * (iy))) / (m)), 
                          (iy') = ((y) - (yr)), 
                          (z') = (vz), (vz') = ((((((Kpy) * ((z) - (zr))) - ((Kdz) * (vz))) + ((Kiz) * (iz))) - ((m) * (g))) / (m)), 
                          (iz') = ((z) - (zr)), 
                          (Theta') = (vTheta), 
                          (vTheta') = (((((KpTheta) * ((Theta) - (Thetar))) - ((KdTheta) * (vTheta))) + ((KiTheta) * (iTheta))) / (Ixx)), 
                          (iTheta') = ((Theta) - (Thetar)), 
                          (Phi') = (vPhi), (vPhi') = (((((KpPhi) * ((Phi) - (Phir))) - ((KdPhi) * (vPhi))) + ((KiPhi) * (iPhi))) / (Iyy)), 
                          (iPhi') = ((Phi) - (Phir)), 
                          (Psi') = (vPsi), (vPsi') = (((((KpPsi) * ((Psi) - (Psir))) - ((KdPsi) * (vPsi))) + ((KiPsi) * (iPsi))) / (Izz)), 
                          (iPsi') = ((Psi) - (Psir)), 
                          (vx) >= (0), (vy) >= (0), 
                          (vz) >= (0)}
                        \] (  (Gammax)
                            = (  ((eps) * (ix))
                               + ((x) - (xr)))))
                   & (  (Gammay)
                      = (((eps) * (iy)) + ((y) - (yr)))))
                & (  (Gammaz)
                   = (((eps) * (iz)) + ((z) - (zr)))))
             & (  (GammaTheta)
                = (  ((eps) * (iTheta))
                   + ((Theta) - (Thetar)))))
          & (  (GammaPhi)
             = (((eps) * (iPhi)) + ((Phi) - (Phir)))))
       & (  (GammaPsi)
          = (((eps) * (iPsi)) + ((Psi) - (Psir)))))
    & (   (  (  ((U) + (((m) * (g)) * ((z) - (zr))))
              + (  (0.5)
                 * (  (  (  (  (  (  (-((Kix) / (eps)))
                                   + (Kpx))
                                * (((x) - (xr)) ^ (2)))
                             + (  (  (-((Kiy) / (eps)))
                                   + (Kpy))
                                * (((y) - (yr)) ^ (2))))
                          + (  (  (-((Kiz) / (eps)))
                                + (Kpz))
                             * (((z) - (zr)) ^ (2))))
                       + (  (  (2)
                             * (  (-((KiTheta) / (eps)))
                                + (KpTheta)))
                          * (((Theta) - (Thetar)) ^ (2))))
                    + (  (  (-((KiPhi) / (eps)))
                          + (KpPhi))
                       * (((Phi) - (Phir)) ^ (2))))))
           + (  (0.5)
              * (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (  (Kix)
                                                                       * (  (Gammax)
                                                                          ^ (2)))
                                                                    / (eps))
                                                                 + (  (  (Kiy)
                                                                       * (  (Gammay)
                                                                          ^ (2)))
                                                                    / (eps)))
                                                              + (  (  (Kiz)
                                                                    * (  (Gammaz)
                                                                       ^ (2)))
                                                                 / (eps)))
                                                           + (  (  (KiTheta)
                                                                 * (  (GammaTheta)
                                                                    ^ (2)))
                                                              / (eps)))
                                                        + (  (  (KiPhi)
                                                              * (  (GammaPhi)
                                                                 ^ (2)))
                                                           / (eps)))
                                                     + (  (  (KiTheta)
                                                           * (  (GammaPsi)
                                                              ^ (2)))
                                                        / (eps)))
                                                  + (  (vx)
                                                     * (  (  (  (-(eps))
                                                              * (m))
                                                           * (  (x)
                                                              - (xr)))
                                                        + (  (m)
                                                           * (vx)))))
                                               + (  (  (x)
                                                     - (xr))
                                                  * (  (  (  (eps)
                                                           * (Kdx))
                                                        * (  (x)
                                                           - (xr)))
                                                     - (  (  (eps)
                                                           * (m))
                                                        * (vx)))))
                                            + (  (vy)
                                               * (  (  (  (-(eps))
                                                        * (m))
                                                     * (  (y)
                                                        - (yr)))
                                                  + (  (m)
                                                     * (vy)))))
                                         + (  (  (y)
                                               - (yr))
                                            * (  (  (  (eps)
                                                     * (Kdy))
                                                  * (  (y)
                                                     - (yr)))
                                               - (  (  (eps)
                                                     * (m))
                                                  * (vy)))))
                                      + (  (vz)
                                         * (  (  (  (-(eps))
                                                  * (m))
                                               * (  (z)
                                                  - (zr)))
                                            + (  (m)
                                               * (vz)))))
                                   + (  ((z) - (zr))
                                      * (  (  (  (eps)
                                               * (Kdz))
                                            * (  (z)
                                               - (zr)))
                                         - (  (  (eps)
                                               * (m))
                                            * (vz)))))
                                + (  (vTheta)
                                   * (  (  (  (  (  (  (  (-(eps))
                                                        * (Ixx))
                                                     * (  (Theta)
                                                        - (Thetar)))
                                                  - (  (  (eps)
                                                        * (Izx))
                                                     * (  (Theta)
                                                        - (Thetar))))
                                               - (  (  (eps)
                                                     * (Iyx))
                                                  * (  (Phi)
                                                     - (Phir))))
                                            + (  (Ixx)
                                               * (vTheta)))
                                         + (  (Iyx)
                                            * (vPhi)))
                                      + ((Izx) * (vPsi)))))
                             + (  ((Theta) - (Thetar))
                                * (  (  (  (  (  (eps)
                                               * (KdTheta))
                                            * (  (Theta)
                                               - (Thetar)))
                                         - (  (  (eps)
                                               * (Ixx))
                                            * (vTheta)))
                                      - (  (  (eps)
                                            * (Iyx))
                                         * (vPhi)))
                                   - (  ((eps) * (Izx))
                                      * (vPsi)))))
                          + (  (vPhi)
                             * (  (  (  (  (  (  (  (-(eps))
                                                  * (Ixy))
                                               * (  (Theta)
                                                  - (Thetar)))
                                            - (  (  (eps)
                                                  * (Izy))
                                               * (  (Theta)
                                                  - (Thetar))))
                                         - (  (  (eps)
                                               * (Iyy))
                                            * (  (Phi)
                                               - (Phir))))
                                      + (  (Ixy)
                                         * (vTheta)))
                                   + ((Iyy) * (vPhi)))
                                + ((Izy) * (vPsi)))))
                       + (  ((Phi) - (Phir))
                          * (  (  (  (  (  (eps)
                                         * (KdPhi))
                                      * ((Phi) - (Phir)))
                                   - (  ((eps) * (Ixy))
                                      * (vTheta)))
                                - (  ((eps) * (Iyy))
                                   * (vPhi)))
                             - (  ((eps) * (Izy))
                                * (vPsi)))))
                    + (  (vPsi)
                       * (  (  (  (  (  (  (  (-(eps))
                                            * (Ixz))
                                         * (  (Theta)
                                            - (Thetar)))
                                      - (  (  (eps)
                                            * (Izz))
                                         * (  (Theta)
                                            - (Thetar))))
                                   - (  ((eps) * (Iyz))
                                      * ((Phi) - (Phir))))
                                + ((Ixz) * (vTheta)))
                             + ((Iyz) * (vPhi)))
                          + ((Izz) * (vPsi)))))
                 + (  ((Theta) - (Thetar))
                    * (  (  (  (  ((eps) * (KdTheta))
                                * ((Theta) - (Thetar)))
                             - (  ((eps) * (Ixz))
                                * (vTheta)))
                          - (((eps) * (Iyz)) * (vPhi)))
                       - (((eps) * (Izz)) * (vPsi)))))))
       <  (c)))

}

\proof {
(keyLog "0" (keyUser "sergey" ) (keyVersion "b7a6dcc7fc758ac54ff97e731d50bdc3ef32760f"))
(keyLog "1" (keyUser "sergey" ) (keyVersion "b7a6dcc7fc758ac54ff97e731d50bdc3ef32760f"))

(autoModeTime "5992")

(nodes "349")

(branches "2")

(interactiveSteps "0")

(branch "dummy ID"
(rule "eval_literals" (formula "1") (term "0,1,0,1,0") (quantifierEliminator "Reduce") (nodenum "52624"))
(rule "eval_literals" (formula "1") (term "0,1,0,1,1") (quantifierEliminator "Reduce") (nodenum "52677"))
(rule "eval_literals" (formula "1") (term "0,1,0,0,1,1") (quantifierEliminator "Reduce") (nodenum "52722"))
(rule "eval_literals" (formula "1") (term "0,1,0,0,1,0") (quantifierEliminator "Reduce") (nodenum "52776"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "52815"))
(rule "eval_literals" (formula "1") (term "0,1,1,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "52895"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "52979"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "53131"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "53295"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "53456"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "53607"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "53780"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "53937"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "54097"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "54279"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "54458"))
(rule "eval_literals" (formula "1") (term "1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "54640"))
(rule "eval_literals" (formula "1") (term "1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0") (quantifierEliminator "Reduce") (nodenum "54815"))
(rule "imp_right" (formula "1") (quantifierEliminator "Reduce") (nodenum "54998"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55027"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55061"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55100"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55135"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55170"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55205"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55240"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55275"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55310"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55349"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55383"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55418"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55453"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55488"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55523"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55558"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55593"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55628"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55663"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55698"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55733"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55768"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55803"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55838"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55873"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55908"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55943"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "55978"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56013"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56048"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56083"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56118"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56153"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56188"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56223"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56258"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56293"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56328"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56363"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56398"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56433"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56468"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56503"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56538"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56573"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56608"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56643"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56678"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56713"))
(rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "56748"))
(rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "49") (quantifierEliminator "Reduce") (nodenum "56786"))
(rule "concrete_and_3" (formula "52") (term "0") (quantifierEliminator "Reduce") (nodenum "56809"))
(rule "replace_known_left" (formula "52") (term "1,0,0,0") (ifseqformula "46") (quantifierEliminator "Reduce") (nodenum "56828"))
(rule "concrete_and_3" (formula "52") (term "0,0,0") (quantifierEliminator "Reduce") (nodenum "56853"))
(rule "replace_known_left" (formula "52") (term "1,0,0,0") (ifseqformula "45") (quantifierEliminator "Reduce") (nodenum "56875"))
(rule "concrete_and_3" (formula "52") (term "0,0,0") (quantifierEliminator "Reduce") (nodenum "56900"))
(rule "replace_known_left" (formula "52") (term "1,0,0") (ifseqformula "47") (quantifierEliminator "Reduce") (nodenum "56921"))
(rule "concrete_and_3" (formula "52") (term "0,0") (quantifierEliminator "Reduce") (nodenum "56939"))
(rule "replace_known_left" (formula "52") (term "1,0") (ifseqformula "48") (quantifierEliminator "Reduce") (nodenum "56957"))
(rule "concrete_and_3" (formula "52") (term "0") (quantifierEliminator "Reduce") (nodenum "56972"))
(rule "and_right" (formula "52") (quantifierEliminator "Reduce") (nodenum "56987"))
(branch " Case 1"
   (rule "diffweaken" (formula "52") (quantifierEliminator "Reduce") (nodenum "73467"))
   (builtin "Update Simplification" (formula "52") (nodenum "73614"))
   (rule "all_right" (formula "52") (inst "skC=vy_2") (quantifierEliminator "Reduce") (nodenum "73748"))
   (rule "all_right" (formula "52") (inst "skC=y_2") (quantifierEliminator "Reduce") (nodenum "73895"))
   (rule "all_right" (formula "52") (inst "skC=iy_2") (quantifierEliminator "Reduce") (nodenum "74038"))
   (rule "all_right" (formula "52") (inst "skC=z_2") (quantifierEliminator "Reduce") (nodenum "74177"))
   (rule "all_right" (formula "52") (inst "skC=vz_2") (quantifierEliminator "Reduce") (nodenum "74312"))
   (rule "all_right" (formula "52") (inst "skC=iz_2") (quantifierEliminator "Reduce") (nodenum "74456"))
   (rule "all_right" (formula "52") (inst "skC=ix_2") (quantifierEliminator "Reduce") (nodenum "74596"))
   (rule "all_right" (formula "52") (inst "skC=vx_2") (quantifierEliminator "Reduce") (nodenum "74739"))
   (rule "all_right" (formula "52") (inst "skC=x_2") (quantifierEliminator "Reduce") (nodenum "74893"))
   (rule "all_right" (formula "52") (inst "skC=iTheta_2") (quantifierEliminator "Reduce") (nodenum "75072"))
   (rule "all_right" (formula "52") (inst "skC=vTheta_2") (quantifierEliminator "Reduce") (nodenum "75247"))
   (rule "all_right" (formula "52") (inst "skC=Theta_2") (quantifierEliminator "Reduce") (nodenum "75418"))
   (rule "all_right" (formula "52") (inst "skC=iPhi_2") (quantifierEliminator "Reduce") (nodenum "75585"))
   (rule "all_right" (formula "52") (inst "skC=vPhi_2") (quantifierEliminator "Reduce") (nodenum "75748"))
   (rule "all_right" (formula "52") (inst "skC=Phi_2") (quantifierEliminator "Reduce") (nodenum "75907"))
   (rule "all_right" (formula "52") (inst "skC=iPsi_2") (quantifierEliminator "Reduce") (nodenum "76062"))
   (rule "all_right" (formula "52") (inst "skC=vPsi_2") (quantifierEliminator "Reduce") (nodenum "76213"))
   (rule "all_right" (formula "52") (inst "skC=Psi_2") (quantifierEliminator "Reduce") (nodenum "86010"))
   (rule "imp_right" (formula "52") (quantifierEliminator "Reduce") (nodenum "86128"))
   (rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "86162"))
   (rule "and_left" (formula "1") (quantifierEliminator "Reduce") (nodenum "86202"))
   (rule "eliminate_variable_decl" (formula "4") (quantifierEliminator "Reduce") (nodenum "86966"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,0,1,1,0") (ifseqformula "38") (quantifierEliminator "Reduce") (nodenum "86988"))
   (rule "mul_one_right" (formula "54") (term "0,1,1,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "86998"))
   (rule "applyEq" (formula "54") (term "1,1,1,1,0,1,1,0") (ifseqformula "21") (quantifierEliminator "Reduce") (nodenum "87008"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "37") (quantifierEliminator "Reduce") (nodenum "87018"))
   (rule "mul_one_right" (formula "54") (term "0,1,1,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "87066"))
   (rule "applyEq" (formula "54") (term "1,0,1,0,1,1,0") (ifseqformula "21") (quantifierEliminator "Reduce") (nodenum "87114"))
   (rule "applyEq" (formula "54") (term "1,1,1,1,1,1,0") (ifseqformula "20") (quantifierEliminator "Reduce") (nodenum "87162"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,1,1,0") (ifseqformula "37") (quantifierEliminator "Reduce") (nodenum "87210"))
   (rule "mul_one_right" (formula "54") (term "0,1,1,1,1,0") (quantifierEliminator "Reduce") (nodenum "87258"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,1,0") (ifseqformula "20") (quantifierEliminator "Reduce") (nodenum "87268"))
   (rule "applyEq" (formula "54") (term "1,1,1,1,0,0,1,1,0") (ifseqformula "20") (quantifierEliminator "Reduce") (nodenum "87316"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,0,0,0,1,1,0") (ifseqformula "30") (quantifierEliminator "Reduce") (nodenum "87364"))
   (rule "mul_one_right" (formula "54") (term "0,1,1,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "87412"))
   (rule "applyEq" (formula "54") (term "1,1,1,1,0,0,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "87460"))
   (rule "applyEq" (formula "54") (term "1,0,1,0,0,1,1,0") (ifseqformula "20") (quantifierEliminator "Reduce") (nodenum "87524"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,0,0,0,0,1,1,0") (ifseqformula "29") (quantifierEliminator "Reduce") (nodenum "87572"))
   (rule "mul_one_right" (formula "54") (term "0,1,1,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "87620"))
   (rule "applyEq" (formula "54") (term "1,1,1,1,0,0,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "87668"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "28") (quantifierEliminator "Reduce") (nodenum "87716"))
   (rule "mul_one_right" (formula "54") (term "0,1,1,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "87764"))
   (rule "applyEq" (formula "54") (term "1,0,1,0,0,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "87812"))
   (rule "applyEq" (formula "54") (term "1,1,1,1,0,0,0,0,0,1,1,0") (ifseqformula "16") (quantifierEliminator "Reduce") (nodenum "87860"))
   (rule "applyEq" (formula "54") (term "0,0,1,0,0,0,0,0,0,1,1,0") (ifseqformula "34") (quantifierEliminator "Reduce") (nodenum "87932"))
   (rule "mul_one_left" (formula "54") (term "0,1,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "88004"))
   (rule "applyEq" (formula "54") (term "0,0,1,0,0,0,0,0,0,0,1,1,0") (ifseqformula "35") (quantifierEliminator "Reduce") (nodenum "88076"))
   (rule "mul_one_left" (formula "54") (term "0,1,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "88164"))
   (rule "applyEq" (formula "54") (term "0,0,1,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "34") (quantifierEliminator "Reduce") (nodenum "88252"))
   (rule "mul_one_left" (formula "54") (term "0,1,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "88340"))
   (rule "applyEq" (formula "54") (term "1,0,1,0,0,0,0,0,1,1,0") (ifseqformula "16") (quantifierEliminator "Reduce") (nodenum "88428"))
   (rule "applyEq" (formula "54") (term "0,0,1,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "27") (quantifierEliminator "Reduce") (nodenum "88500"))
   (rule "mul_one_left" (formula "54") (term "0,1,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "88572"))
   (rule "applyEq" (formula "54") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "26") (quantifierEliminator "Reduce") (nodenum "88644"))
   (rule "mul_one_left" (formula "54") (term "0,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "88716"))
   (rule "applyEq" (formula "54") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "25") (quantifierEliminator "Reduce") (nodenum "88788"))
   (rule "mul_one_left" (formula "54") (term "0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "88860"))
   (rule "applyEq" (formula "54") (term "0,0,0,0,1,1,1,0,0") (ifseqformula "35") (quantifierEliminator "Reduce") (nodenum "88932"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,1,1,0,0") (ifseqformula "21") (quantifierEliminator "Reduce") (nodenum "88965"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,1,0,0") (ifseqformula "32") (quantifierEliminator "Reduce") (nodenum "88998"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,0,1,1,0,0") (ifseqformula "20") (quantifierEliminator "Reduce") (nodenum "89031"))
   (rule "applyEq" (formula "54") (term "1,1,0,1,0,1,1,0,0") (ifseqformula "31") (quantifierEliminator "Reduce") (nodenum "89064"))
   (rule "applyEq" (formula "54") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "24") (quantifierEliminator "Reduce") (nodenum "89149"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,0,0,1,1,0,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "89213"))
   (rule "applyEq" (formula "54") (term "1,0,1,0,0,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "89277"))
   (rule "applyEq" (formula "54") (term "1,0,1,1,0,0,0,1,1,0,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "89310"))
   (rule "applyEq" (formula "54") (term "0,0,0,0,1,0,0,1,1,0,0") (ifseqformula "27") (quantifierEliminator "Reduce") (nodenum "89374"))
   (rule "applyEq" (formula "54") (term "0,0,0,1,0,1,0,1,1,0,0") (ifseqformula "34") (quantifierEliminator "Reduce") (nodenum "89438"))
   (rule "applyEq" (formula "54") (term "0,0,0,0,1,0,0,0,1,1,0,0") (ifseqformula "26") (quantifierEliminator "Reduce") (nodenum "89502"))
   (rule "applyEq" (formula "54") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "23") (quantifierEliminator "Reduce") (nodenum "89512"))
   (rule "applyEq" (formula "54") (term "1,0,1,0,0,0,0,1,1,0,0") (ifseqformula "16") (quantifierEliminator "Reduce") (nodenum "89522"))
   (rule "applyEq" (formula "54") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "22") (quantifierEliminator "Reduce") (nodenum "89607"))
   (rule "applyEq" (formula "54") (term "1,1,1,0,0,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "89692"))
   (rule "applyEq" (formula "54") (term "0,0,0,0") (ifseqformula "6") (quantifierEliminator "Reduce") (nodenum "89747"))
   (rule "add_zero_left" (formula "54") (term "0,0,0") (quantifierEliminator "Reduce") (nodenum "89795"))
   (rule "applyEq" (formula "50") (term "1,1,1") (ifseqformula "20") (quantifierEliminator "Reduce") (nodenum "89834"))
   (rule "applyEq" (formula "51") (term "1,1,1") (ifseqformula "21") (quantifierEliminator "Reduce") (nodenum "89844"))
   (rule "applyEq" (formula "48") (term "1,1,1") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "89854"))
   (rule "applyEq" (formula "49") (term "1,1,1") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "89864"))
   (rule "applyEq" (formula "54") (term "0,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "25") (quantifierEliminator "Reduce") (nodenum "89874"))
   (rule "applyEq" (formula "45") (term "0,0,1") (ifseqformula "40") (quantifierEliminator "Reduce") (nodenum "89913"))
   (rule "mul_one_left" (formula "45") (term "0,1") (quantifierEliminator "Reduce") (nodenum "89923"))
   (rule "applyEq" (formula "47") (term "1,1,1") (ifseqformula "16") (quantifierEliminator "Reduce") (nodenum "89933"))
   (rule "applyEq" (formula "46") (term "0,1") (ifseqformula "41") (quantifierEliminator "Reduce") (nodenum "89943"))
   (rule "applyEq" (formula "52") (term "1,1,1") (ifseqformula "19") (quantifierEliminator "Reduce") (nodenum "89953"))
   (rule "applyEq" (formula "45") (term "0,1,1") (ifseqformula "43") (quantifierEliminator "Reduce") (nodenum "89964"))
   (rule "eval_literals" (formula "45") (term "1,1") (quantifierEliminator "Reduce") (nodenum "89974"))
   (rule "applyEq" (formula "55") (term "1,1,1") (ifseqformula "16") (quantifierEliminator "Reduce") (nodenum "89992"))
   (rule "applyEq" (formula "54") (term "1,0,0,0,0") (ifseqformula "4") (quantifierEliminator "Reduce") (nodenum "90529"))
   (rule "applyEq" (formula "54") (term "0,0,0,0,0") (ifseqformula "5") (quantifierEliminator "Reduce") (nodenum "90582"))
   (rule "eval_literals" (formula "54") (term "0,0,0,0") (quantifierEliminator "Reduce") (nodenum "90636"))
   (builtin "Eliminate Universal Quantifiers" (formula "4") (quantifierEliminator "Reduce") (nodenum "90699"))
)
(branch " Case 2"
   (rule "eliminate_variable_decl" (formula "1") (quantifierEliminator "Reduce") (nodenum "77067"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,0,1,1,0") (ifseqformula "35") (quantifierEliminator "Reduce") (nodenum "77267"))
   (rule "mul_one_right" (formula "51") (term "0,1,1,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "77347"))
   (rule "applyEq" (formula "51") (term "1,1,1,1,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "77416"))
   (rule "applyEq" (formula "51") (term "1,1,1,1,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "77491"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,1,1,0") (ifseqformula "34") (quantifierEliminator "Reduce") (nodenum "77560"))
   (rule "mul_one_right" (formula "51") (term "0,1,1,1,1,0") (quantifierEliminator "Reduce") (nodenum "77624"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,0,0,1,1,0") (ifseqformula "34") (quantifierEliminator "Reduce") (nodenum "77685"))
   (rule "mul_one_right" (formula "51") (term "0,1,1,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "77765"))
   (rule "applyEq" (formula "51") (term "1,0,1,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "77842"))
   (rule "applyEq" (formula "51") (term "1,1,1,1,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "77905"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,0,0,0,1,1,0") (ifseqformula "27") (quantifierEliminator "Reduce") (nodenum "77969"))
   (rule "mul_one_right" (formula "51") (term "0,1,1,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "78057"))
   (rule "applyEq" (formula "51") (term "1,0,1,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "78142"))
   (rule "applyEq" (formula "51") (term "1,1,1,1,0,0,0,1,1,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "78213"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,0,0,0,0,1,1,0") (ifseqformula "26") (quantifierEliminator "Reduce") (nodenum "78304"))
   (rule "mul_one_right" (formula "51") (term "0,1,1,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "78400"))
   (rule "applyEq" (formula "51") (term "1,1,1,1,0,0,0,0,1,1,0") (ifseqformula "14") (quantifierEliminator "Reduce") (nodenum "78493"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "25") (quantifierEliminator "Reduce") (nodenum "78592"))
   (rule "mul_one_right" (formula "51") (term "0,1,1,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "78696"))
   (rule "applyEq" (formula "51") (term "1,0,1,0,0,0,0,1,1,0") (ifseqformula "14") (quantifierEliminator "Reduce") (nodenum "78797"))
   (rule "applyEq" (formula "51") (term "1,0,1,0,0,0,1,1,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "78884"))
   (rule "applyEq" (formula "51") (term "1,1,1,1,0,0,0,0,0,1,1,0") (ifseqformula "13") (quantifierEliminator "Reduce") (nodenum "78963"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "79070"))
   (rule "applyEq" (formula "51") (term "0,0,1,0,0,0,0,0,0,1,1,0") (ifseqformula "31") (quantifierEliminator "Reduce") (nodenum "79118"))
   (rule "mul_one_left" (formula "51") (term "0,1,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "79228"))
   (rule "applyEq" (formula "51") (term "1,0,1,0,0,0,0,0,1,1,0") (ifseqformula "13") (quantifierEliminator "Reduce") (nodenum "79330"))
   (rule "applyEq" (formula "51") (term "0,0,1,0,0,0,0,0,0,0,1,1,0") (ifseqformula "32") (quantifierEliminator "Reduce") (nodenum "79425"))
   (rule "mul_one_left" (formula "51") (term "0,1,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "79543"))
   (rule "applyEq" (formula "51") (term "0,0,1,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "31") (quantifierEliminator "Reduce") (nodenum "79653"))
   (rule "mul_one_left" (formula "51") (term "0,1,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "79779"))
   (rule "applyEq" (formula "51") (term "0,0,1,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "24") (quantifierEliminator "Reduce") (nodenum "79897"))
   (rule "mul_one_left" (formula "51") (term "0,1,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "80031"))
   (rule "applyEq" (formula "51") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "23") (quantifierEliminator "Reduce") (nodenum "80157"))
   (rule "mul_one_left" (formula "51") (term "0,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "80297"))
   (rule "applyEq" (formula "51") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "22") (quantifierEliminator "Reduce") (nodenum "80429"))
   (rule "mul_one_left" (formula "51") (term "0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "80569"))
   (rule "applyEq" (formula "51") (term "0,0,0,0,1,1,1,0,0") (ifseqformula "32") (quantifierEliminator "Reduce") (nodenum "80701"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,1,1,0,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "80782"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,1,0,0") (ifseqformula "29") (quantifierEliminator "Reduce") (nodenum "80851"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,0,1,1,0,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "80919"))
   (rule "applyEq" (formula "51") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "21") (quantifierEliminator "Reduce") (nodenum "80998"))
   (rule "applyEq" (formula "51") (term "0,0,0,1,0,1,0,1,1,0,0") (ifseqformula "31") (quantifierEliminator "Reduce") (nodenum "81082"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,0,0,1,1,0,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "81167"))
   (rule "applyEq" (formula "51") (term "1,0,1,1,0,0,0,1,1,0,0") (ifseqformula "14") (quantifierEliminator "Reduce") (nodenum "81252"))
   (rule "applyEq" (formula "51") (term "0,0,0,0,1,0,0,1,1,0,0") (ifseqformula "24") (quantifierEliminator "Reduce") (nodenum "81343"))
   (rule "applyEq" (formula "51") (term "0,0,0,0,1,0,0,0,1,1,0,0") (ifseqformula "23") (quantifierEliminator "Reduce") (nodenum "81421"))
   (rule "applyEq" (formula "51") (term "1,1,0,1,0,1,1,0,0") (ifseqformula "28") (quantifierEliminator "Reduce") (nodenum "81511"))
   (rule "applyEq" (formula "51") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "20") (quantifierEliminator "Reduce") (nodenum "81590"))
   (rule "applyEq" (formula "51") (term "0,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "22") (quantifierEliminator "Reduce") (nodenum "81675"))
   (rule "applyEq" (formula "51") (term "0,0,1,0,0,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "81766"))
   (rule "applyEq" (formula "51") (term "1,1,1,0,0,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "81827"))
   (rule "applyEq" (formula "51") (term "1,0,1,0,0,0,0,1,1,0,0") (ifseqformula "13") (quantifierEliminator "Reduce") (nodenum "81882"))
   (rule "applyEq" (formula "51") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "19") (quantifierEliminator "Reduce") (nodenum "81974"))
   (rule "applyEq" (formula "48") (term "1,1,1") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "82060"))
   (rule "applyEq" (formula "47") (term "1,1,1") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "82091"))
   (rule "applyEq" (formula "43") (term "0,1") (ifseqformula "38") (quantifierEliminator "Reduce") (nodenum "82122"))
   (rule "applyEq" (formula "51") (term "0,0,0,0") (ifseqformula "3") (quantifierEliminator "Reduce") (nodenum "82158"))
   (rule "add_zero_left" (formula "51") (term "0,0,0") (quantifierEliminator "Reduce") (nodenum "82206"))
   (rule "applyEq" (formula "46") (term "1,1,1") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "82245"))
   (rule "applyEq" (formula "44") (term "1,1,1") (ifseqformula "13") (quantifierEliminator "Reduce") (nodenum "82276"))
   (rule "applyEq" (formula "45") (term "1,1,1") (ifseqformula "14") (quantifierEliminator "Reduce") (nodenum "82307"))
   (rule "applyEq" (formula "42") (term "0,0,1") (ifseqformula "37") (quantifierEliminator "Reduce") (nodenum "82338"))
   (rule "mul_one_left" (formula "42") (term "0,1") (quantifierEliminator "Reduce") (nodenum "82376"))
   (rule "applyEq" (formula "42") (term "0,1,1") (ifseqformula "40") (quantifierEliminator "Reduce") (nodenum "82407"))
   (rule "eval_literals" (formula "42") (term "1,1") (quantifierEliminator "Reduce") (nodenum "82445"))
   (rule "applyEq" (formula "49") (term "1,1,1") (ifseqformula "16") (quantifierEliminator "Reduce") (nodenum "82494"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,1,0,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "82544"))
   (rule "applyEq" (formula "52") (term "1,0,0,0,0,1,1,1,1,0") (ifseqformula "34") (quantifierEliminator "Reduce") (nodenum "82608"))
   (rule "mul_one_right" (formula "52") (term "0,0,0,0,1,1,1,1,0") (quantifierEliminator "Reduce") (nodenum "82682"))
   (rule "applyEq" (formula "52") (term "1,1,0,0,0,1,1,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "82756"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,1,1,1,1,0") (ifseqformula "8") (quantifierEliminator "Reduce") (nodenum "82830"))
   (rule "applyEq" (formula "52") (term "1,0,0,0,0,0,1,1,0,0") (ifseqformula "19") (quantifierEliminator "Reduce") (nodenum "82918"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,0,1,1,0,1,1,0") (ifseqformula "6") (quantifierEliminator "Reduce") (nodenum "83010"))
   (rule "applyEq" (formula "52") (term "1,1,1,0,0,0,0,1,1,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "83123"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,1,1,0,1,1,0") (ifseqformula "12") (quantifierEliminator "Reduce") (nodenum "83230"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,1,1,1,1,0") (ifseqformula "12") (quantifierEliminator "Reduce") (nodenum "83337"))
   (rule "applyEq" (formula "52") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "24") (quantifierEliminator "Reduce") (nodenum "83413"))
   (rule "mul_one_left" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "83575"))
   (rule "applyEq" (formula "52") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "31") (quantifierEliminator "Reduce") (nodenum "83737"))
   (rule "mul_one_left" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "83899"))
   (rule "applyEq" (formula "52") (term "0,1,0,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "4") (quantifierEliminator "Reduce") (nodenum "84053"))
   (rule "applyEq" (formula "52") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "32") (quantifierEliminator "Reduce") (nodenum "84178"))
   (rule "mul_one_left" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "84332"))
   (rule "applyEq" (formula "52") (term "1,1,0,1,1,0,0,0,0,0,0,1,1,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "84478"))
   (rule "applyEq" (formula "52") (term "1,0,0,0,0,0,0,1,1,0,0,0,1,1,0") (ifseqformula "7") (quantifierEliminator "Reduce") (nodenum "84596"))
   (rule "applyEq" (formula "52") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "14") (quantifierEliminator "Reduce") (nodenum "84725"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,1,1,0,0") (ifseqformula "21") (quantifierEliminator "Reduce") (nodenum "84859"))
   (rule "applyEq" (formula "52") (term "0,0,0,1,0,1,0,1,1,0,0") (ifseqformula "31") (quantifierEliminator "Reduce") (nodenum "84933"))
   (rule "applyEq" (formula "52") (term "0,0,0,0,1,1,1,0,0") (ifseqformula "32") (quantifierEliminator "Reduce") (nodenum "85007"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,1,1,0,0,0,0,1,1,0") (ifseqformula "9") (quantifierEliminator "Reduce") (nodenum "85065"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,0,1,1,0,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "85179"))
   (rule "applyEq" (formula "52") (term "0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "85245"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,0,0,1,1,0,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "85386"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,0,0") (ifseqformula "29") (quantifierEliminator "Reduce") (nodenum "85460"))
   (rule "applyEq" (formula "52") (term "1,0,0,1,1,0,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "85518"))
   (rule "applyEq" (formula "52") (term "1,1,1,0,0,0,1,1,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "85651"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "85752"))
   (rule "applyEq" (formula "52") (term "0,0,0,0,1,0,0,0,1,1,0,0") (ifseqformula "23") (quantifierEliminator "Reduce") (nodenum "85840"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,0,0,0,1,1,0,0") (ifseqformula "14") (quantifierEliminator "Reduce") (nodenum "85926"))
   (rule "applyEq" (formula "52") (term "0,1,1,1,0,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "90701"))
   (rule "applyEq" (formula "52") (term "1,0,0,0,0,1,1,0,0,0,0,1,1,0") (ifseqformula "34") (quantifierEliminator "Reduce") (nodenum "90826"))
   (rule "mul_one_right" (formula "52") (term "0,0,0,0,1,1,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "90932"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "14") (quantifierEliminator "Reduce") (nodenum "91038"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "9") (quantifierEliminator "Reduce") (nodenum "91158"))
   (rule "applyEq" (formula "52") (term "1,1,0,1,0,1,1,0,0") (ifseqformula "28") (quantifierEliminator "Reduce") (nodenum "91291"))
   (rule "applyEq" (formula "52") (term "1,0,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "4") (quantifierEliminator "Reduce") (nodenum "91357"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "13") (quantifierEliminator "Reduce") (nodenum "91502"))
   (rule "applyEq" (formula "52") (term "0,1,0,1,1,0,1,1,0") (ifseqformula "12") (quantifierEliminator "Reduce") (nodenum "91638"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,1,1,0,0,0,1,1,0") (ifseqformula "5") (quantifierEliminator "Reduce") (nodenum "91725"))
   (rule "applyEq" (formula "52") (term "0,1,0,0,1,1,0,0,0,1,1,0") (ifseqformula "7") (quantifierEliminator "Reduce") (nodenum "91848"))
   (rule "applyEq" (formula "52") (term "0,1,0,1,1,0,0,0,1,1,0") (ifseqformula "5") (quantifierEliminator "Reduce") (nodenum "91957"))
   (rule "applyEq" (formula "52") (term "1,1,1,0,0,0,1,1,0,0,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "92060"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,1,1,0") (ifseqformula "6") (quantifierEliminator "Reduce") (nodenum "92177"))
   (rule "applyEq" (formula "52") (term "1,1,0,0,0,1,1,0,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "92247"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,1,1,0,0") (ifseqformula "20") (quantifierEliminator "Reduce") (nodenum "92345"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "11") (quantifierEliminator "Reduce") (nodenum "92425"))
   (rule "applyEq" (formula "52") (term "0,1,1,1,0,0,0,1,1,0") (ifseqformula "10") (quantifierEliminator "Reduce") (nodenum "92564"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "92659"))
   (rule "applyEq" (formula "52") (term "1,0,0,0,0,1,1,0,0,1,1,0") (ifseqformula "35") (quantifierEliminator "Reduce") (nodenum "92731"))
   (rule "mul_one_right" (formula "52") (term "0,0,0,0,1,1,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "92830"))
   (rule "applyEq" (formula "52") (term "0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "92920"))
   (rule "applyEq" (formula "52") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "23") (quantifierEliminator "Reduce") (nodenum "93077"))
   (rule "mul_one_left" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "93223"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,1,1,0,0,1,1,0") (ifseqformula "7") (quantifierEliminator "Reduce") (nodenum "93369"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,0,0,1,1,0") (ifseqformula "10") (quantifierEliminator "Reduce") (nodenum "93467"))
   (rule "applyEq" (formula "52") (term "1,0,0,0,0,0,0,1,1,0,1,1,0") (ifseqformula "8") (quantifierEliminator "Reduce") (nodenum "93553"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "93666"))
   (rule "applyEq" (formula "52") (term "1,0,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "93822"))
   (rule "applyEq" (formula "52") (term "1,1,1,0,0,0,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "93965"))
   (rule "applyEq" (formula "52") (term "1,1,1,0,0,0,0,1,1,0,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "94104"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,0,1,1,0,0") (ifseqformula "13") (quantifierEliminator "Reduce") (nodenum "94227"))
   (rule "applyEq" (formula "52") (term "0,0,0,0,1,0,0,1,1,0,0") (ifseqformula "24") (quantifierEliminator "Reduce") (nodenum "94301"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,0,0,0,1,1,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "94336"))
   (rule "applyEq" (formula "52") (term "1,1,0,0,0,1,1,0,0,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "94440"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,1,1,0,0,1,1,0") (ifseqformula "5") (quantifierEliminator "Reduce") (nodenum "94546"))
   (rule "applyEq" (formula "52") (term "0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "31") (quantifierEliminator "Reduce") (nodenum "94638"))
   (rule "mul_one_left" (formula "52") (term "0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "94784"))
   (rule "applyEq" (formula "52") (term "1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "94922"))
   (rule "applyEq" (formula "52") (term "0,1,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "9") (quantifierEliminator "Reduce") (nodenum "95081"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "95200"))
   (rule "applyEq" (formula "52") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "13") (quantifierEliminator "Reduce") (nodenum "95334"))
   (rule "applyEq" (formula "52") (term "1,1,0,0,0,0,0,1,1,0,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "95493"))
   (rule "applyEq" (formula "52") (term "0,1,1,1,0,1,1,0") (ifseqformula "6") (quantifierEliminator "Reduce") (nodenum "95616"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "95695"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,0,0,0,0,0,0,1,1,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "95751"))
   (rule "applyEq" (formula "52") (term "0,0,1,0,0,0") (ifseqformula "2") (quantifierEliminator "Reduce") (nodenum "95869"))
   (rule "applyEq" (formula "52") (term "1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "25") (quantifierEliminator "Reduce") (nodenum "95912"))
   (rule "mul_one_right" (formula "52") (term "0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "96054"))
   (rule "applyEq" (formula "52") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "13") (quantifierEliminator "Reduce") (nodenum "96196"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0,0,1,1,0,0,0,1,1,0") (ifseqformula "10") (quantifierEliminator "Reduce") (nodenum "96338"))
   (rule "applyEq" (formula "52") (term "1,1,0,1,1,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "14") (quantifierEliminator "Reduce") (nodenum "96461"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,1,1,0,0,0,0,1,1,0") (ifseqformula "4") (quantifierEliminator "Reduce") (nodenum "96604"))
   (rule "applyEq" (formula "52") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "22") (quantifierEliminator "Reduce") (nodenum "96724"))
   (rule "mul_one_left" (formula "52") (term "0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "96862"))
   (rule "applyEq" (formula "52") (term "1,1,0,0,0,0,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "97000"))
   (rule "applyEq" (formula "52") (term "1,0,0,1,1,0,0,0,0,0,0,0,0,1,1,0") (ifseqformula "26") (quantifierEliminator "Reduce") (nodenum "97139"))
   (rule "mul_one_right" (formula "52") (term "0,0,1,1,0,0,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "97274"))
   (rule "applyEq" (formula "52") (term "1,1,1,0,0,0,1,1,0,0,0,0,0,1,1,0") (ifseqformula "18") (quantifierEliminator "Reduce") (nodenum "97400"))
   (rule "applyEq" (formula "52") (term "1,1,1,0,0,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "97533"))
   (rule "applyEq" (formula "52") (term "1,0,1,0,0,0") (ifseqformula "1") (quantifierEliminator "Reduce") (nodenum "97576"))
   (rule "eval_literals" (formula "52") (term "0,1,0,0,0") (quantifierEliminator "Reduce") (nodenum "97625"))
   (rule "applyEq" (formula "52") (term "0,0,0,0") (ifseqformula "3") (quantifierEliminator "Reduce") (nodenum "97674"))
   (rule "add_zero_left" (formula "52") (term "0,0,0") (quantifierEliminator "Reduce") (nodenum "97724"))
   (rule "applyEq" (formula "52") (term "0,1,0,0,1,1,0,1,1,0") (ifseqformula "8") (quantifierEliminator "Reduce") (nodenum "97765"))
   (rule "applyEq" (formula "52") (term "0,0,0,0,0,0,0,0,1,1,0,0") (ifseqformula "22") (quantifierEliminator "Reduce") (nodenum "97858"))
   (rule "applyEq" (formula "52") (term "1,1,0,1,1,0,0,0,0,0,0,0,1,1,0") (ifseqformula "15") (quantifierEliminator "Reduce") (nodenum "97893"))
   (rule "applyEq" (formula "52") (term "1,0,1,1,1,0,0,0,0,1,1,0") (ifseqformula "11") (quantifierEliminator "Reduce") (nodenum "98020"))
   (rule "applyEq" (formula "52") (term "1,1,0,0,0,0,0,1,1,0,1,1,0") (ifseqformula "17") (quantifierEliminator "Reduce") (nodenum "98122"))
   (rule "applyEq" (formula "52") (term "1,0,0,1,1,0,0,0,0,0,0,1,1,0") (ifseqformula "27") (quantifierEliminator "Reduce") (nodenum "98229"))
   (rule "mul_one_right" (formula "52") (term "0,0,1,1,0,0,0,0,0,0,1,1,0") (quantifierEliminator "Reduce") (nodenum "98348"))
   (rule "applyEq" (formula "52") (term "0,1,1,1,0,0,0,0,0,1,1,0") (ifseqformula "11") (quantifierEliminator "Reduce") (nodenum "98458"))
   (rule "applyEq" (formula "51") (term "1,0,0,0,0") (ifseqformula "1") (quantifierEliminator "Reduce") (nodenum "99580"))
   (rule "eval_literals" (formula "51") (term "0,0,0,0") (quantifierEliminator "Reduce") (nodenum "99590"))
   (builtin "Eliminate Universal Quantifiers" (formula "1") (quantifierEliminator "Reduce") (nodenum "99599"))
)
)

}
"